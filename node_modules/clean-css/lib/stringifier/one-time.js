var helpers = require('./helpers');

/**
 * Description
 * @method store
 * @param {} token
 * @param {} context
 * @return 
 */
function store(token, context) {
  context.output.push(typeof token == 'string' ? token : token[0]);
}

/**
 * Description
 * @method context
 * @return ObjectExpression
 */
function context() {
  return {
    output: [],
    store: store
  };
}

/**
 * Description
 * @method all
 * @param {} tokens
 * @return CallExpression
 */
function all(tokens) {
  var fakeContext = context();
  helpers.all(tokens, fakeContext);
  return fakeContext.output.join('');
}

/**
 * Description
 * @method body
 * @param {} tokens
 * @return CallExpression
 */
function body(tokens) {
  var fakeContext = context();
  helpers.body(tokens, fakeContext);
  return fakeContext.output.join('');
}

/**
 * Description
 * @method property
 * @param {} tokens
 * @param {} position
 * @return CallExpression
 */
function property(tokens, position) {
  var fakeContext = context();
  helpers.property(tokens, position, true, fakeContext);
  return fakeContext.output.join('');
}

/**
 * Description
 * @method selectors
 * @param {} tokens
 * @return CallExpression
 */
function selectors(tokens) {
  var fakeContext = context();
  helpers.selectors(tokens, fakeContext);
  return fakeContext.output.join('');
}

/**
 * Description
 * @method value
 * @param {} tokens
 * @param {} position
 * @return CallExpression
 */
function value(tokens, position) {
  var fakeContext = context();
  helpers.value(tokens, position, true, fakeContext);
  return fakeContext.output.join('');
}

module.exports = {
  all: all,
  body: body,
  property: property,
  selectors: selectors,
  value: value
};
