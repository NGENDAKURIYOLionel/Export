"use strict";
/**
 * Description
 * @method exports
 * @param {} Promise
 * @return 
 */
module.exports = function(Promise) {
/**
 * Description
 * @method PromiseInspection
 * @param {} promise
 * @return 
 */
function PromiseInspection(promise) {
    if (promise !== undefined) {
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValueField = promise._isFateSealed()
            ? promise._settledValue() : undefined;
    }
    else {
        this._bitField = 0;
        this._settledValueField = undefined;
    }
}

PromiseInspection.prototype._settledValue = function() {
    return this._settledValueField;
};

var value = 
/**
  * Description
  * @method value
  * @return CallExpression
  */
 PromiseInspection.prototype.value = function () {
    if (!this.isFulfilled()) {
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var reason = PromiseInspection.prototype.error =
/**
 * Description
 * @method reason
 * @return CallExpression
 */
PromiseInspection.prototype.reason = function () {
    if (!this.isRejected()) {
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
    }
    return this._settledValue();
};

var isFulfilled = 
/**
  * Description
  * @method isFulfilled
  * @return BinaryExpression
  */
 PromiseInspection.prototype.isFulfilled = function() {
    return (this._bitField & 33554432) !== 0;
};

var isRejected = 
/**
  * Description
  * @method isRejected
  * @return BinaryExpression
  */
 PromiseInspection.prototype.isRejected = function () {
    return (this._bitField & 16777216) !== 0;
};

var isPending = 
/**
  * Description
  * @method isPending
  * @return BinaryExpression
  */
 PromiseInspection.prototype.isPending = function () {
    return (this._bitField & 50397184) === 0;
};

var isResolved = 
/**
  * Description
  * @method isResolved
  * @return BinaryExpression
  */
 PromiseInspection.prototype.isResolved = function () {
    return (this._bitField & 50331648) !== 0;
};

PromiseInspection.prototype.isCancelled =
Promise.prototype._isCancelled = function() {
    return (this._bitField & 65536) === 65536;
};

/**
 * Description
 * @method isCancelled
 * @return CallExpression
 */
Promise.prototype.isCancelled = function() {
    return this._target()._isCancelled();
};

/**
 * Description
 * @method isPending
 * @return CallExpression
 */
Promise.prototype.isPending = function() {
    return isPending.call(this._target());
};

/**
 * Description
 * @method isRejected
 * @return CallExpression
 */
Promise.prototype.isRejected = function() {
    return isRejected.call(this._target());
};

/**
 * Description
 * @method isFulfilled
 * @return CallExpression
 */
Promise.prototype.isFulfilled = function() {
    return isFulfilled.call(this._target());
};

/**
 * Description
 * @method isResolved
 * @return CallExpression
 */
Promise.prototype.isResolved = function() {
    return isResolved.call(this._target());
};

/**
 * Description
 * @method value
 * @return CallExpression
 */
Promise.prototype.value = function() {
    return value.call(this._target());
};

/**
 * Description
 * @method reason
 * @return CallExpression
 */
Promise.prototype.reason = function() {
    var target = this._target();
    target._unsetRejectionIsUnhandled();
    return reason.call(target);
};

Promise.prototype._value = function() {
    return this._settledValue();
};

Promise.prototype._reason = function() {
    this._unsetRejectionIsUnhandled();
    return this._settledValue();
};

Promise.PromiseInspection = PromiseInspection;
};
