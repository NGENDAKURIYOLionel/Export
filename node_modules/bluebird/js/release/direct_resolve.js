"use strict";
/**
 * Description
 * @method exports
 * @param {} Promise
 * @return 
 */
module.exports = function(Promise) {
/**
 * Description
 * @method returner
 * @return MemberExpression
 */
function returner() {
    return this.value;
}
/**
 * Description
 * @method thrower
 * @return 
 */
function thrower() {
    throw this.reason;
}

Promise.prototype["return"] =
/**
 * Description
 * @method thenReturn
 * @param {} value
 * @return CallExpression
 */
Promise.prototype.thenReturn = function (value) {
    if (value instanceof Promise) value.suppressUnhandledRejections();
    return this._then(
        returner, undefined, undefined, {value: value}, undefined);
};

Promise.prototype["throw"] =
/**
 * Description
 * @method thenThrow
 * @param {} reason
 * @return CallExpression
 */
Promise.prototype.thenThrow = function (reason) {
    return this._then(
        thrower, undefined, undefined, {reason: reason}, undefined);
};

/**
 * Description
 * @method catchThrow
 * @param {} reason
 * @return 
 */
Promise.prototype.catchThrow = function (reason) {
    if (arguments.length <= 1) {
        return this._then(
            undefined, thrower, undefined, {reason: reason}, undefined);
    } else {
        var _reason = arguments[1];
        /**
         * Description
         * @method handler
         * @return 
         */
        var handler = function() {throw _reason;};
        return this.caught(reason, handler);
    }
};

/**
 * Description
 * @method catchReturn
 * @param {} value
 * @return 
 */
Promise.prototype.catchReturn = function (value) {
    if (arguments.length <= 1) {
        if (value instanceof Promise) value.suppressUnhandledRejections();
        return this._then(
            undefined, returner, undefined, {value: value}, undefined);
    } else {
        var _value = arguments[1];
        if (_value instanceof Promise) _value.suppressUnhandledRejections();
        /**
         * Description
         * @method handler
         * @return _value
         */
        var handler = function() {return _value;};
        return this.caught(value, handler);
    }
};
};
